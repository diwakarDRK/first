CRC

#include <bits/stdc++.h>
using namespace std;

// Returns XOR of 'a' and 'b'
// (both of same length)
string xor1(string a, string b)
{

	// Initialize result
	string result = "";

	int n = b.length();

	// Traverse all bits, if bits are
	// same, then XOR is 0, else 1
	for (int i = 1; i < n; i++) {
		if (a[i] == b[i])
			result += "0";
		else
			result += "1";
	}
	return result;
}

// Performs Modulo-2 division
string mod2div(string dividend, string divisor)
{

	// Number of bits to be XORed at a time.
	int pick = divisor.length();

	// Slicing the dividend to appropriate
	// length for particular step
	string tmp = dividend.substr(0, pick);

	int n = dividend.length();

	while (pick < n) {
		if (tmp[0] == '1')

			// Replace the dividend by the result
			// of XOR and pull 1 bit down
			tmp = xor1(divisor, tmp) + dividend[pick];
		else

			// If leftmost bit is '0'.
			// If the leftmost bit of the dividend (or the
			// part used in each step) is 0, the step cannot
			// use the regular divisor; we need to use an
			// all-0s divisor.
			tmp = xor1(std::string(pick, '0'), tmp)
				+ dividend[pick];

		// Increment pick to move further
		pick += 1;
	}

	// For the last n bits, we have to carry it out
	// normally as increased value of pick will cause
	// Index Out of Bounds.
	if (tmp[0] == '1')
		tmp = xor1(divisor, tmp);
	else
		tmp = xor1(std::string(pick, '0'), tmp);

	return tmp;
}

// Function used at the sender side to encode
// data by appending remainder of modular division
// at the end of data.
void encodeData(string data, string key)
{
	int l_key = key.length();

	// Appends n-1 zeroes at end of data
	string appended_data
		= (data + std::string(l_key - 1, '0'));

	string remainder = mod2div(appended_data, key);

	// Append remainder in the original data
	string codeword = data + remainder;
	cout << "Remainder : " << remainder << "\n";
	cout << "Encoded Data (Data + Remainder) :" << codeword
		<< "\n";
}
// checking if the message received by receiver is correct
// or not. If the remainder is all 0 then it is correct,
// else wrong.
void receiver(string data, string key)
{
	string currxor
		= mod2div(data.substr(0, key.size()), key);
	int curr = key.size();
	while (curr != data.size()) {
		if (currxor.size() != key.size()) {
			currxor.push_back(data[curr++]);
		}
		else {
			currxor = mod2div(currxor, key);
		}
	}
	if (currxor.size() == key.size()) {
		currxor = mod2div(currxor, key);
	}
	if (currxor.find('1') != string::npos) {
		cout << "there is some error in data" << endl;
	}
	else {
		cout << "correct message received" << endl;
	}
}
// Driver code
int main()
{
	string data = "100100";
	string key = "1101";
	cout << "Sender side..." << endl;
	encodeData(data, key);

	cout << "\nReceiver side..." << endl;
	receiver(data+mod2div(data+std::string(key.size() - 1, '0'),key), key);

	return 0;
}

Articulation point
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void APUtil(vector<int> adj[], int u, vector<bool>& visited,
            vector<int>& disc, vector<int>& low, vector<int>& parent,
            vector<bool>& isAP)
{
    static int time = 0;
    int children = 0;
    visited[u] = true;
    disc[u] = low[u] = ++time;

    for (int i=0 ; i<adj[u].size(); i++) {

        int v = adj[u][i];
        if (!visited[v]) {
            children++;
            parent[v] = u;
            APUtil(adj, v, visited, disc, low, parent, isAP);
            low[u] = min(low[u], low[v]);

            if (parent[u] == -1 && children > 1)
                isAP[u] = true;
            else if (parent[u] != -1 && low[v] >= disc[u])
                isAP[u] = true;
        }
        else if (v != parent[u])
            low[u] = min(low[u], disc[v]);
    }
}

void AP(vector<int> adj[], int V)
{
    vector<bool> visited(V, false);
    vector<int> disc(V), low(V), parent(V, -1);
    vector<bool> isAP(V, false);

    for (int u = 0; u < V; u++) {
        if (!visited[u])
            APUtil(adj, u, visited, disc, low, parent, isAP);
    }

    cout << "Articulation points:\n";
    for (int u = 0; u < V; u++) {
        if (isAP[u])
            cout << u << " ";
    }
}

void addEdge(vector<int> adj[], int u, int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

int main()
{
    int V = 5;
    vector<int> adj1[V];
    addEdge(adj1, 1, 0);
    addEdge(adj1, 0, 2);
    addEdge(adj1, 2, 1);
    addEdge(adj1, 0, 3);
    addEdge(adj1, 3, 4);
    AP(adj1, V);

    cout << endl;

    V = 4;
    vector<int> adj2[V];
    addEdge(adj2, 0, 1);
    addEdge(adj2, 1, 2);
    addEdge(adj2, 2, 3);
    AP(adj2, V);

    cout << endl;

    V = 7;
    vector<int> adj3[V];
    addEdge(adj3, 0, 1);
    addEdge(adj3, 1, 2);
    addEdge(adj3, 2, 0);
    addEdge(adj3, 1, 3);
    addEdge(adj3, 1, 4);
    addEdge(adj3, 1, 6);
    addEdge(adj3, 3, 5);
    addEdge(adj3, 4, 5);
    AP(adj3, V);

    return 0;
}

find the closest permutation to the original string out of all permutation
// C++ program to distinct permutations of the string
#include <bits/stdc++.h>
using namespace std;

// Returns true if str[curr] does not matches with any of the
// characters after str[start]
bool shouldSwap(char str[], int start, int curr)
{
	for (int i = start; i < curr; i++)
		if (str[i] == str[curr])
			return 0;
	return 1;
}

// Prints all distinct permutations in str[0..n-1]
void findPermutations(char str[], int index, int n)
{
	if (index >= n) {
		cout << str << endl;
		return;
	}

	for (int i = index; i < n; i++) {

		// Proceed further for str[i] only if it
		// doesn't match with any of the characters
		// after str[index]
		bool check = shouldSwap(str, index, i);
		if (check) {
			swap(str[index], str[i]);
			findPermutations(str, index + 1, n);
			swap(str[index], str[i]);
		}
	}
}

// Driver code
int main()
{
	char str[] = "ABCA";
	int n = strlen(str);
	findPermutations(str, 0, n);
	return 0;
}

Bit wise encoding technique(Hauffman coding)
#include<bits/stdc++.h>
using namespace std;
struct Node
{
    char data;
    Node* left;
    Node* right;
};
Node* newNode(int data)
{
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return (node);
}
Node* insertLevelOrder(char arr[],
                       int i, int n)
{
      Node *root = NULL;
    if (i < n)
    {
        root = newNode(arr[i]);

        root->left = insertLevelOrder(arr,
                   2 * i + 1, n);
        root->right = insertLevelOrder(arr,
                  2 * i + 2, n);
    }
    return root;
}
void inorder(Node* root,map<char,vector<int> >&m,vector<int>vec)
{
    if(root==NULL)
        return;
        vec.push_back(1);
    inorder(root->left,m,vec);
    m[root->data]=vec;
    vec.pop_back();
    vec.push_back(0);
    inorder(root->right,m,vec);
    }
int main()
{
    string s;
    cin>>s;
    map<char,int>m;
    for(int i=0;i<s.length();i++)
        m[s[i]]++;
        map<char,int>::iterator it = m.begin();
   int n=sm.size();
   char arr[n];
   int i=0;
  while(it!=m.end())
  {
      arr[i]=it->first;
      cout<<it->first<<" "<<it->second<<endl;
      it++;
      i++;
  }
  Node* root = insertLevelOrder(arr,0,n);
  map<char,vector<int> >m1;
  vector<int>vec;
  inorder(root,m1,vec);
   map<char,vector<int> >::iterator it1 = m1.begin();
   cout<<"Bitwise encoding of the character is as follows \n";
   while(it1!=m1.end())
   {
       cout<<it1->first<<" ";
       vector<int>temp=it1->second;
       for(int i=0;i<temp.size();i++)
        cout<<temp[i];
       cout<<endl;
       it1++;
   }
  return 0;
}

Kruskal
// C++ program for Kruskal's algorithm to find Minimum
// Spanning Tree of a given connected, undirected and
// weighted graph
#include<bits/stdc++.h>
using namespace std;

// Creating shortcut for an integer pair
typedef pair<int, int> iPair;

// Structure to represent a graph
struct Graph
{
	int V, E;
	vector< pair<int, iPair> > edges;

	// Constructor
	Graph(int V, int E)
	{
		this->V = V;
		this->E = E;
	}

	// Utility function to add an edge
	void addEdge(int u, int v, int w)
	{
		edges.push_back({w, {u, v}});
	}

	// Function to find MST using Kruskal's
	// MST algorithm
	int kruskalMST();
};

// To represent Disjoint Sets
struct DisjointSets
{
	int *parent, *rnk;
	int n;

	// Constructor.
	DisjointSets(int n)
	{
		// Allocate memory
		this->n = n;
		parent = new int[n+1];
		rnk = new int[n+1];

		// Initially, all vertices are in
		// different sets and have rank 0.
		for (int i = 0; i <= n; i++)
		{
			rnk[i] = 0;

			//every element is parent of itself
			parent[i] = i;
		}
	}

	// Find the parent of a node 'u'
	// Path Compression
	int find(int u)
	{
		/* Make the parent of the nodes in the path
		from u--> parent[u] point to parent[u] */
		if (u != parent[u])
			parent[u] = find(parent[u]);
		return parent[u];
	}

	// Union by rank
	void merge(int x, int y)
	{
		x = find(x), y = find(y);

		/* Make tree with smaller height
		a subtree of the other tree */
		if (rnk[x] > rnk[y])
			parent[y] = x;
		else // If rnk[x] <= rnk[y]
			parent[x] = y;

		if (rnk[x] == rnk[y])
			rnk[y]++;
	}
};

/* Functions returns weight of the MST*/

int Graph::kruskalMST()
{
	int mst_wt = 0; // Initialize result

	// Sort edges in increasing order on basis of cost
	sort(edges.begin(), edges.end());

	// Create disjoint sets
	DisjointSets ds(V);

	// Iterate through all sorted edges
	vector< pair<int, iPair> >::iterator it;
	for (it=edges.begin(); it!=edges.end(); it++)
	{
		int u = it->second.first;
		int v = it->second.second;

		int set_u = ds.find(u);
		int set_v = ds.find(v);

		// Check if the selected edge is creating
		// a cycle or not (Cycle is created if u
		// and v belong to same set)
		if (set_u != set_v)
		{
			// Current edge will be in the MST
			// so print it
			cout << u << " - " << v << endl;

			// Update MST weight
			mst_wt += it->first;

			// Merge two sets
			ds.merge(set_u, set_v);
		}
	}

	return mst_wt;
}

// Driver program to test above functions
int main()
{
	/* Let us create above shown weighted
	and undirected graph */
	int V = 9, E = 14;
	Graph g(V, E);

	// making above shown graph
	g.addEdge(0, 1, 4);
	g.addEdge(0, 7, 8);
	g.addEdge(1, 2, 8);
	g.addEdge(1, 7, 11);
	g.addEdge(2, 3, 7);
	g.addEdge(2, 8, 2);
	g.addEdge(2, 5, 4);
	g.addEdge(3, 4, 9);
	g.addEdge(3, 5, 14);
	g.addEdge(4, 5, 10);
	g.addEdge(5, 6, 2);
	g.addEdge(6, 7, 1);
	g.addEdge(6, 8, 6);
	g.addEdge(7, 8, 7);

	cout << "Edges of MST are \n";
	int mst_wt = g.kruskalMST();

	cout << "\nWeight of MST is " << mst_wt;
return 0;
}

